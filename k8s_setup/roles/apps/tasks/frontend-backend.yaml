# k8s_setup/roles/apps/tasks/frontend-backend.yaml
- name: Copy frontend manifests to control-plane
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/../app/manifests/frontend-deployment.yaml"
    dest: /tmp/frontend-deployment.yaml
  when: inventory_hostname in groups['control-plane']

- name: Copy frontend service manifest to control-plane
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/../app/manifests/frontend-service.yaml"
    dest: /tmp/frontend-service.yaml
  when: inventory_hostname in groups['control-plane']

- name: Copy backend manifests to control-plane
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/../app/manifests/backend-deployment.yaml"
    dest: /tmp/backend-deployment.yaml
  when: inventory_hostname in groups['control-plane']

- name: Copy backend service manifest to control-plane
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/../app/manifests/backend-service.yaml"
    dest: /tmp/backend-service.yaml
  when: inventory_hostname in groups['control-plane']

- name: Read .env file from master node
  ansible.builtin.slurp:
    src: /home/asmae/.env
  register: env_file_content
  when: inventory_hostname in groups['control-plane']

# Step 2: Decode and parse the `.env` file
- name: Decode and parse .env file
  set_fact:
    env_vars: "{{ env_file_content.content | b64decode | splitlines() | map('regex_replace', '^([^=]+)=([^=]+)$', '\\1=\\2') | list | items2dict }}"
  when: inventory_hostname in groups['control-plane']

# Step 3: Inject environment variables into frontend deployment manifest
- name: Inject REACT_APP_BACKEND_URL into frontend deployment
  ansible.builtin.replace:
    path: /tmp/frontend-deployment.yaml
    regexp: 'REACT_APP_BACKEND_URL=.*'
    replace: "REACT_APP_BACKEND_URL={{ env_vars.REACT_APP_BACKEND_URL }}"
  when: inventory_hostname in groups['control-plane']

# Step 4: Inject FRONTEND_URL into backend deployment manifest
- name: Inject FRONTEND_URL into backend deployment
  ansible.builtin.replace:
    path: /tmp/backend-deployment.yaml
    regexp: 'FRONTEND_URL=.*'
    replace: "FRONTEND_URL={{ env_vars.FRONTEND_URL }}"
  when: inventory_hostname in groups['control-plane']

# Step 5: Apply backend deployment
- name: Apply backend deployment with updated env variables
  ansible.builtin.shell: |
    kubectl apply --kubeconfig=/home/asmae/.kube/config --validate=false -f /tmp/backend-deployment.yaml
  when: inventory_hostname in groups['control-plane']

# Step 6: Apply backend service
- name: Apply backend service
  ansible.builtin.shell: |
    kubectl apply --kubeconfig=/home/asmae/.kube/config --validate=false -f /tmp/backend-service.yaml
  when: inventory_hostname in groups['control-plane']

# Step 7: Apply frontend deployment
- name: Apply frontend deployment with updated env variables
  ansible.builtin.shell: |
    kubectl apply --kubeconfig=/home/asmae/.kube/config --validate=false -f /tmp/frontend-deployment.yaml
  when: inventory_hostname in groups['control-plane']

# Step 8: Apply frontend service
- name: Apply frontend service
  ansible.builtin.shell: |
    kubectl apply --kubeconfig=/home/asmae/.kube/config --validate=false -f /tmp/frontend-service.yaml
  when: inventory_hostname in groups['control-plane']